
@ExtendWith(MockitoExtension.class)
public class MockitoAnnotationTest {

    // Первый способ – это создать полностью виртуальный объект
    // ИмяКласса имяПеременной = Mockito.mock(ИмяКласса.class); 
    MyClass myClass = Mockito.mock(MyClass.class);

    // Второй способ – это обертки над существующими объектами 
    // ИмяКласса имяПеременной = Mockito.spy(объект); 
    
}

// 1-й способ 
@ExtendWith(MockitoExtension.class)
class MockTest {
    @Test
    public void whenNotUseMockAnnotation_thenCorrect() {
        List mockList = Mockito.mock(ArrayList.class);
        //эти методы не будут ничего делать – это заглушки
        mockList.add("one");
        mockList.add("two");
    }
}

// короткая запись кода 
@ExtendWith(MockitoExtension.class)
class MockTest {
    @Mock
    List mockList;

    @Test
    public void whenNotUseMockAnnotation_thenCorrect() {
        //эти методы не будут ничего делать – это заглушки
        mockList.add("one");
        mockList.add("two");
    }
}

// 2-й способ - пример 
@ExtendWith(MockitoExtension.class)
class SpyTest {
    @Test
    public void whenMockAnnotation() {
        List<String> mockList = Mockito.spy(new ArrayList<String>());
        //эти методы будут работать!
        mockList.add("one");
        mockList.add("two");
    }
}

// или 
@ExtendWith(MockitoExtension.class)
class SpyTest {
    @Spy
    List mockList = new ArrayList<String>();

    @Test
    public void whenMockAnnotation() {
        // эти методы будут работать!
        mockList.add("one");
        mockList.add("two");
    }
}

///////// Поведение объектов //////////// 
Mockito.doReturn(результат).when(объект).имяМетода();

Mockito.when(объект.имяМетода()).thenReturn(результат);
или 
Mockito.doReturn(результат).when(объект).имяМетода();

Mockito.doThrow(исключение.class).when(объект).имяМетода();
или
Mockito.when(объект.имяМетода()).thenThrow(исключение.class);

Mockito.doThrow(new Исключение()).when(объект).имяМетода();

Mockito.doReturn(результат).when(объект).имяМетода(параметр);

Mockito.doReturn("Иван").when(mockList).get(any(int.class));

Mockito.doAnswer(функция).when(объект).имяМетода(параметр);

Mockito.verify(объект).имяМетода(параметр);

Mockito.verify(объект,количество).имяМетода(параметр);

// кроме указанных вызовов метода, никаких других обращений к объекту не было.
Mockito.verifyNoMoreInteractions(объект);

Assertions.assertThrows(исключение.class, () -> объект.имяМетода());

// 
MockedStatic<ИмяКласса>управляющийОбъект = Mockito.mockStatic(ИмяКласса.class);
управляющийОбъект.when(ИмяКласса::имяМетода).thenReturn(результат);
@Test
void givenStaticMethodWithNoArgs () {
    try (MockedStatic< StaticUtils> utilities =  Mockito.mockStatic( StaticUtils.class)) {
        //добавляем правило
         utilities.when(StaticUtils::name).thenReturn("Привет");

        //проверяем, что правило работает
        assertEquals("Привет", StaticUtils.name());
    }
}


// примеры кода 
@ExtendWith(MockitoExtension.class)
class DoReturnTest {
    @Mock
    List mockList;

    @Test
    public void whenMockAnnotation () {
         //создаем правило: вернуть 10 при вызове метода size
        Mockito.doReturn(10).when(mockList).size();

        //тут вызывается метод и вернет 10!!
        assertEquals(10, mockList.size());
    }
}

@ExtendWith(MockitoExtension.class)
class WhenTest {
    @Mock
    List mockList;

    @Test
    public void whenMockAnnotation() {
        //создаем правило: вернуть 10 при вызове метода size
        Mockito.when(mockList.size() ).thenReturn(10);

        //тут вызывается метод и вернет 10!!
        assertEquals(10, mockList.size());
    }
}

@ExtendWith(MockitoExtension.class)
class DoThrowTest {
    @Mock
    List mockList;

    @Test
    public void whenMockAnnotation() {
        Mockito.when(mockList.size() ).thenThrow(IllegalStateException.class);
        mockList.size(); //тут кинется исключение
    }
}

@ExtendWith(MockitoExtension.class)
class ParamsTest {
    @Mock
    List mockList;

    @Test
    public void whenMockAnnotation() {
        //добавление первого правила
        Mockito.doReturn("Иван").when(mockList).get(10);
        //добавление второго правила
        Mockito.doReturn("Марья").when(mockList).get(500);

        assertEquals("Иван", mockList.get(10));
        assertEquals("Марья", mockList.get(500));

    }
}

@ExtendWith(MockitoExtension.class)
class DoAnswerTest {
    @Mock
    List mockList;

    @Test
    public void whenMockAnnotation() {
        Mockito.doAnswer(invocation -> {
            int parameter = invocation.getArgument(0);
            return parameter * parameter;
        }).when(mockList).get(anyInt());

        assertEquals(100, mockList.get(10));
        assertEquals(25, mockList.get(5));
    }
}

@ExtendWith(MockitoExtension.class)
class VerifyTest {
    @Mock
    List<String> mockList;

    @Test
    public void whenMockAnnotation() {
        //вызов метода
        String name = mockList.get(10);

        //проверяем вызывался ли метод
        Mockito.verify(mockList).get(10);
    }
}

@ExtendWith(MockitoExtension.class)
class ThenThrowTest {
    @Mock
    List mockList;

    @Test
    public void whenMockAnnotation() {
        //задаем поведение метода (нужно только для демонстрации)
        Mockito.when(mockList.size()).thenThrow(IllegalStateException.class);

        //проверяем бросится ли IllegalStateException при вызове метода size
        assertThrows(IllegalStateException.class, () -> mockList.size());
    }
}


//
