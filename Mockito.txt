
@ExtendWith(MockitoExtension.class)
public class MockitoAnnotationTest {

    // Первый способ – это создать полностью виртуальный объект
    // ИмяКласса имяПеременной = Mockito.mock(ИмяКласса.class); 
    MyClass myClass = Mockito.mock(MyClass.class);

    // Второй способ – это обертки над существующими объектами 
    // ИмяКласса имяПеременной = Mockito.spy(объект); 
    
}

// 1-й способ 
@ExtendWith(MockitoExtension.class)
class MockTest {
    @Test
    public void whenNotUseMockAnnotation_thenCorrect() {
        List mockList = Mockito.mock(ArrayList.class);
        //эти методы не будут ничего делать – это заглушки
        mockList.add("one");
        mockList.add("two");
    }
}

// короткая запись кода 
@ExtendWith(MockitoExtension.class)
class MockTest {
    @Mock
    List mockList;

    @Test
    public void whenNotUseMockAnnotation_thenCorrect() {
        //эти методы не будут ничего делать – это заглушки
        mockList.add("one");
        mockList.add("two");
    }
}

// 2-й способ - пример 
@ExtendWith(MockitoExtension.class)
class SpyTest {
    @Test
    public void whenMockAnnotation() {
        List<String> mockList = Mockito.spy(new ArrayList<String>());
        //эти методы будут работать!
        mockList.add("one");
        mockList.add("two");
    }
}

// или 
@ExtendWith(MockitoExtension.class)
class SpyTest {
    @Spy
    List mockList = new ArrayList<String>();

    @Test
    public void whenMockAnnotation() {
        // эти методы будут работать!
        mockList.add("one");
        mockList.add("two");
    }
}

///////// Поведение объектов //////////// 
Mockito.doReturn(результат).when(объект).имяМетода();

Mockito.when(объект.имяМетода()).thenReturn(результат);
или 
Mockito.doReturn(результат).when(объект).имяМетода();

Mockito.doThrow(исключение.class).when(объект).имяМетода();
или
Mockito.when(объект.имяМетода()).thenThrow(исключение.class);

Mockito.doThrow(new Исключение()).when(объект).имяМетода();


// примеры кода 
@ExtendWith(MockitoExtension.class)
class DoReturnTest {
    @Mock
    List mockList;

    @Test
    public void whenMockAnnotation () {
         //создаем правило: вернуть 10 при вызове метода size
        Mockito.doReturn(10).when(mockList).size();

        //тут вызывается метод и вернет 10!!
        assertEquals(10, mockList.size());
    }
}

@ExtendWith(MockitoExtension.class)
class WhenTest {
    @Mock
    List mockList;

    @Test
    public void whenMockAnnotation() {
        //создаем правило: вернуть 10 при вызове метода size
        Mockito.when(mockList.size() ).thenReturn(10);

        //тут вызывается метод и вернет 10!!
        assertEquals(10, mockList.size());
    }
}

@ExtendWith(MockitoExtension.class)
class DoThrowTest {
    @Mock
    List mockList;

    @Test
    public void whenMockAnnotation() {
        Mockito.when(mockList.size() ).thenThrow(IllegalStateException.class);
        mockList.size(); //тут кинется исключение
    }
}

//
