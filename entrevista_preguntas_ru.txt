
Обязательно:
0. ООП — определение, рассказать о каждом принципе ооп (+дать пример из реальной жизни).
1. Equals и hashcode — какой между ними контракт (связь)?
2. HashMap — как понять, в какую корзину попадет объект, что такое коллизия, в какой структуре данных происходит хранение данных внутри HashMap, стандартный размер, как увеличиваются количество корзин.
3. Stream — какие виды операций, в чем между ними разница, привести пример с каждого вида операций.
4. String pool, Integer pool — что это?
5. Heap, stack — что это, в чем разница?
6. Отличия между Runnable, Thread, Future.
7. Volatile, атомарность.
8. Solid, Kiss, Dry — определения, примеры из реальной жизни.
9. Модификаторы доступа в Java.
10. В чем отличие между абстрактным классом и интерфейсом. Может ли быть интерфейс приватным?
11. Функциональные интерфейсы.
12. Перечислить все методы Object и рассказать, зачем они нужны. Особенности метода clone.
13. Что такое сериализация и десериализация.
14. Try catch with resources — описать, что это, рассказать по интерфейс Closeable.
15. Отличия между Final, finally, finalize?
16. Перегрузка, переопределение метода — отличие.
17. Почему String сделали immutable, рассказать про StringBuilder и StringBuffer.
18. Что такое временная сложность О(1), сложность по памяти.
19. Структуры данных: рассказать про map, set, queue, deque, list и их реализацию в Java (treeMap, hashSet, hashMap, arrayList, linkedList, priorityQueue, blockingQueue), описать сложность (худшая, средняя, лучшая) вставки, поиска, удаления элемента в каждой структуре.
20. Примитивные типы данных в Java. Зачем нужен каждый из них.
21. Виды ошибок. Checked и unchecked exceptions.
22. Что такое JVM, JRE, JDK?
23. С какими сборщиками работали? Maven — жизненный цикл сборки.
24. Spring — Определения Ioc, Di, жизненный цикл бина, контекст, аннотации @Bean, @Configuration, @Autowired, @Advice, @Aspect, @Service, @Repository.
25. Generics — определение, что такое ограничение снизу и сверху?
26.Паттерны программирования — хотя бы Singleton (готовность рассказать, почему это иногда антипаттерн) + Builder, Adapter, Factory, Decorator, Proxt.

Желательно:
26. Тестирование — виды тестов, с каким библиотеками (JUnit) работали. Что такое Mock, Stab, Spy?
27. Spring boot — зачем нужен, готовность в режиме онлайн сделать SpringBoot приложение.
28. Hibernate — зачем нужен, Entity, join column, lazy vs eager загрузка, уровни кэширования (hard).
29. Spring rest — зачем нужен, как сделать @post, @get ендпоинты. Как считать параметры/тело запроса? Как отдать в json формате?
30. Структуры данных — деревья, их виды.
31. Алгоритмы — виды сортировок.

Помимо Java могут спросить:
1.(Обязательно!) Git — зачем нужен, операции merge, rebase, cherry-pick,push, pull, commit, log, checkout, branch, reset, revert, refresh.
2.SQL — умение написать запрос: объединить две таблицы в одну (inner join, left join).
3.Базы данных — 3 нормальных формы, индексы (зачем нужны, виды), primary key, foreign key


/
