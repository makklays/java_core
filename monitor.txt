
///
Что такое монитор?

В случае если мы, например, имеем синхронизированный метод(помеченный ключевым словом syncronized) и один из наших потоков заходит в этот метод, то этот поток блокирует этот метод для других потоков 
и любой другой поток которому нужно будет воспользоваться нашим методом будет "ждать" пока первый поток не закончит свою работу с методом. Про такую ситуацию говорят: "данный метод занят монитором". 
Монитор в Java - объект, который обеспечивает правильную работу в многопоточной среде - отметка что синхронизированный блок кода временно стал недоступен, 
отметка что блок кода стал доступен после выполнения, ожидание если синхронизированный блок занят другим потоком.

///
Какими способами можно создать потоки в Java?

В Java доступны три варианта создания потока из класса - расширить класс Thread либо реализовать интерфейсы Callable или Runnable.

При использовании Thread мы запускаем поток методом start(), а описываем логику выполнения в методе run().

При использовании Runnable мы должны вызвать метод run(), а у Callable - метод call(). Так как и Runnable и Callable - интерфейсы, мы определим логику 
выполнения внутри их методов(Runnable и Callable являются функциональными интерфейсами которые имеют только один метод - run() и call() соответственно). 
Разница в этих двух интерфейсов в том что Callable возвращает результат.

///
Какие есть способы синхронизации в Java?

В Java существует несколько способов синхронизации:
 - по методу/блоку инициализации - с помощью ключевого слова syncronized
 - по переменной - используя ключевое слово volatile
 - методы wait/notify/notifyAll
 - используя классы из пакета java.util.concurrent - в этом пакете собраны классы работа которых основана на атомарных операциях.

///
Что такое Dead lock?

Случай когда у нас выполняются два потока(A, B) и наш первый поток(А) заблокировал метод a() и второй поток(В) заблокировал метод b() и в то же время 
поток А пытается получить доступ к методу b(), а поток B пытается получить доступ к методу а() называют dead lock.


/
