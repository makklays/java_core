
JUnit 5 

Для методов, которые тестируются добавляется слово @Test 
Имеем метод: 
public boolean isNumberEven(Integer number) {
    return number % 2 == 0;
}

Тестируем его:
@Test (expected = Exception.class) 	(expected = Exception.class) — указывает на то, что в данном тестовом методе вы преднамеренно ожидается Exception.
@Test (timeout=1000) 	(timeout=1000) — указывает, что тестируемый метод не должен занимать больше чем 1 секунду. 

@Test
void givenEvenNumber_whenCheckingIsNumberEven_thenTrue() {
    boolean result = bean.isNumberEven(8);

    Assertions.assertTrue(result);
}
@Test
void givenOddNumber_whenCheckingIsNumberEven_thenFalse() {
    boolean result = bean.isNumberEven(3);

    Assertions.assertFalse(result);
} 

Еще пример теста УТВЕРДИТЬ РАВНО:
@Test
public void whenAssertingEquality_thenEqual() {
    String expected = "ForEach";
    String actual = "ForEach";
    assertEquals(expected, actual);

    char[] expected = {'J','u','n','i','t'};
    char[] actual = "Junit".toCharArray();
    assertArrayEquals(expected, actual);

    int[] expected = null;
    int[] actual = null;
    assertArrayEquals(expected, actual);

    Object car = null;
    assertNull("The car should be null", car);

    Object cat = new Object();
    Object dog = new Object();
    assertNotSame(cat, dog);

    assertTrue("5 is greater then 4", 5 > 4);
    assertFalse("5 is not greater then 6", 5 > 6);

    try {
        methodThatShouldThrowException();
        fail("Exception not thrown");
    } catch (UnsupportedOperationException e) {
        assertEquals("Operation Not Supported", e.getMessage());
    }

    assertThat(
        Arrays.asList("Java", "Kotlin", "Scala"), 
        hasItems("Java", "Kotlin")
    );

    Object dog = new Object();
    assertNotNull(dog, () -> "The dog should not be null");

    String language = "Java";
    Optional<String> optional = Optional.of(language);
    assertSame(language, optional.get());

    // Test not completed
    fail("FAIL - test not completed");

    Object obj = null;
    assertAll(
      "heading",
      () -> assertEquals(4, 2 * 2, "4 is 2 times 2"),
      () -> assertEquals("java", "JAVA".toLowerCase()),
      () -> assertNull(obj, "obj is null")
    );

    Iterable<String> al = new ArrayList<>(asList("Java", "Junit", "Test"));
    Iterable<String> ll = new LinkedList<>(asList("Java", "Junit", "Test"));
    assertIterableEquals(al, ll);

    List<String> expected = asList("Java", "\\d+", "JUnit");
    List<String> actual = asList("Java", "11", "JUnit");
    assertLinesMatch(expected, actual);

    Integer value = 5; // result of an algorithm
    assertNotEquals(0, value, "The result cannot be 0");

    Throwable exception = assertThrows(
      IllegalArgumentException.class, 
      () -> {
          throw new IllegalArgumentException("Exception message");
      }
    );
    assertEquals("Exception message", exception.getMessage());

    assertTimeout(
      ofSeconds(2), 
      () -> {
        // code that requires less than 2 minutes to execute
        Thread.sleep(1000);
      }
    );
}

Также можно указать сообщение, которое будет отображаться в случае сбоя утверждения:

assertEquals("failure - strings are not equal", expected, actual);

expected - esperada 
actual   - real


JUnit 5 включает новые модели программирования и расширения для написания тестов в JUnit 5. Новые аннотации по сравнению с JUnit 4:

    @TestFactory — обозначает метод, который является тестовой фабрикой для динамических тестов.
    @DisplayName — определяет пользовательское отображаемое имя для тестового класса или тестового метода.
    @Nested — обозначает, что аннотированный класс является вложенным, нестатическим тестовым классом.
    @Tag — объявляет теги для фильтрации тестов
    @ExtendWith — регистрирует пользовательские расширения
    @BeforeEach — обозначает, что аннотированный метод будет выполняться перед каждым тестовым методом (ранее @Before )
    @AfterEach — означает, что аннотированный метод будет выполняться после каждого тестового метода (ранее @After )
    @BeforeAll — означает, что аннотированный метод будет выполняться перед всеми тестовыми методами в текущем классе (ранее @BeforeClass )
    @AfterAll — означает, что аннотированный метод будет выполнен после всех тестовых методов в текущем классе (ранее @AfterClass )
    @Disable — отключает тестовый класс или метод (ранее @Ignore )

Группы аннотаций деляться на следующие группы, отвечающие за выполнение: до тестов, во время тестов (необязательно) и после тестов:

////////// ДО ////////////////
@BeforeAll и @BeforeEach
@BeforeAll
static void setup() {
    log.info("@BeforeAll - executes once before all test methods in this class");
}
@BeforeEach
void init() {
    log.info("@BeforeEach - executes before each test method in this class");
}

//////////// ВО ВРЕМЯ ///////////////////
@DisplayName и @Disabled
@DisplayName("Single test successful")
@Test
void testSingleSuccessTest() {
    log.info("Success");
}
@Test
@Disabled("Not implemented yet")
void testShowSomething() {
}

///////////// ПОСЛЕ /////////////////////
@AfterEach и @AfterAll
@AfterEach
void tearDown() {
    log.info("@AfterEach - executed after each test method.");
}
@AfterAll
static void done() {
    log.info("@AfterAll - executed after all test methods.");
}
  
Утверждения и предположения 

/////////// УТВЕРЖДЕНИЯ //////////////////
@Test
void lambdaExpressions() {
    List numbers = Arrays.asList(1, 2, 3);
    assertTrue(numbers.stream()
      .mapToInt(Integer::intValue)
      .sum() > 5, () -> "Sum should be greater than 5");
}
@Test
void groupAssertions() {
   int[] numbers = {0, 1, 2, 3, 4};
   assertAll("numbers",
       () -> assertEquals(numbers[0], 1),
       () -> assertEquals(numbers[3], 3),
       () -> assertEquals(numbers[4], 1)
   );
}

/////////// ПРЕДПОЛОЖЕНИЯ //////////////////
@Test
void trueAssumption() {
    assumeTrue(5 > 1);
    assertEquals(5 + 2, 7);
}
@Test
void falseAssumption() {
    assumeFalse(5 < 1);
    assertEquals(5 + 2, 7);
}
@Test
void assumptionThat() {
    String someString = "Just a string";
    assumingThat(
        someString.equals("Just a string"),
        () -> assertEquals(2 + 2, 4)
    );
}

/////////// Тестирование исключений //////////
@Test
void shouldThrowException() {
    Throwable exception = assertThrows(UnsupportedOperationException.class, () -> {
      throw new UnsupportedOperationException("Not supported");
    });
    assertEquals("Not supported", exception.getMessage());
}
@Test
void assertThrowsException() {
    String str = null;
    assertThrows(IllegalArgumentException.class, () -> {
      Integer.valueOf(str);
    });
}

//////////// Наборы тестов /////////////////// 
@Suite
@SelectPackages("com.foreach")
@ExcludePackages("com.foreach.suites")
public class AllUnitTest {}

@Suite
@SelectClasses({AssertionTest.class, AssumptionTest.class, ExceptionTest.class})
public class AllUnitTest {}

//////////// Динамические тесты ///////////////
@TestFactory
Stream<DynamicTest> translateDynamicTestsFromStream() {
    return in.stream()
      .map(word ->
          DynamicTest.dynamicTest("Test translate " + word, () -> {
            int id = in.indexOf(word);
            assertEquals(out.get(id), translate(word));
          })
    );
}


.
